{"version":3,"sources":["components/MapComponent.js","App.js","reportWebVitals.js","index.js"],"names":["position","getIconImage","temperature","temp","parseFloat","srcPath","MapComponent","info","className","MapContainer","center","zoom","scrollWheelZoom","style","width","height","TileLayer","attribution","url","map","item","undefined","latitude","longitude","Marker","icon","temperatura","Leaflet","divIcon","iconUrl","html","iconSize","iconAnchor","popupAnchor","Popup","stacja","id_stacji","weatherAPI","getGeolocationApi","city","App","useState","data","setData","getAllGeolocation","a","dataWeather","Promise","all","elem","fetch","then","response","json","resp","results","push","console","log","responseWeather","responses","useEffect","getAllApiInfo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAIMA,EAAW,CAAC,MAAO,OAEzB,SAASC,EAAaC,GACpB,IAAMC,EAAOC,WAAWF,GAEpBG,EACF,uHAkBF,OAhBI,KAAOF,EACTE,EACE,uHACO,IAAMF,GAAQA,GAAQ,GAC/BE,EACE,wHACQ,EAAIF,GAAQA,GAAQ,EAC9BE,EACE,wHACQ,GAAKF,GAAQA,IAAS,IAChCE,EACE,uHACOF,IAAS,OAClBE,EACE,sHAEGA,EAmBM,SAASC,EAAT,GAAiC,IAATC,EAAQ,EAARA,KACrC,OACE,qCACIA,EAAqE,GAA9D,mBAAGC,UAAU,oBAAb,oCACT,eAACC,EAAA,EAAD,CACEC,OAAQV,EACRW,KAAM,EACNC,iBAAiB,EACjBJ,UAAU,MACVK,MAAO,CAAEC,MAAO,IAAMC,OAAQ,KALhC,UAOE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAELX,EACGA,EAAKY,KAAI,SAACC,GACR,QAA0CC,KAArCD,EAAKE,UAAYF,EAAKG,WACzB,OACE,cAACC,EAAA,EAAD,CAEExB,SAAU,CAACoB,EAAKE,SAAUF,EAAKG,WAC/BE,MAtCHtB,EAsCiBiB,EAAKM,YArCtBC,IAAQC,QAAQ,CAC7BC,QACE,gFACFrB,UAAW,UACXsB,KAAK,iBAAD,OAAmB7B,EACrBE,GADE,uCAE4BA,EAF5B,eAGJ4B,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,EAAG,GAChBC,YAAa,CAAC,GAAI,MAyBJ,SAKE,eAACC,EAAA,EAAD,WACG,IACAd,EAAKe,OAFR,kBAE+Bf,EAAKM,YAFpC,YAJKN,EAAKgB,WApC9B,IAAiBjC,KAgDL,SC5EZ,IAAMkC,EAAa,gDAEnB,SAASC,EAAkBC,GACzB,MAAM,6FAAN,OAAoGA,EAAKJ,QA4C5FK,MAzCf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,iDAGb,uBAMiBC,EANjB,aAAAC,EAAA,iGAAAA,EAAA,MAME,WAAiCC,GAAjC,SAAAD,EAAA,+EAEUE,QAAQC,IACZF,EAAY3B,KAAI,SAAC8B,GAAD,OACdC,MAAMZ,EAAkBW,IACrBE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJC,EAAQC,KAAR,2BACKP,GADL,IAEE3B,SAAUgC,EAAKZ,KAAK,GAAGpB,SACvBC,UAAW+B,EAAKZ,KAAK,GAAGnB,oBAVtC,gCAeWgC,GAfX,gCAiBIE,QAAQC,IAAR,MAjBJ,yDANF,uBAMiBd,EANjB,4CACQW,EAAU,GADlB,SAG8BL,MAAMb,GAHpC,cAGMsB,EAHN,gBAI0BA,EAAgBN,OAJ1C,cAIMP,EAJN,iBA2B0BF,EAAkBE,GA3B5C,QA2BQc,EA3BR,OA4BEjB,EAAQiB,GA5BV,6CAHa,sBAsCb,OAJAC,qBAAU,YAlCG,mCAmCXC,KACC,IAEI,cAACxD,EAAD,CAAcC,KAAMmC,KCnCdqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0007fdd1.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { MapContainer, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport Leaflet from \"leaflet\";\nconst position = [52.12, 19.21];\n\nfunction getIconImage(temperature) {\n  const temp = parseFloat(temperature);\n\n  let srcPath =\n    \"https://www.flaticon.com/svg/vstatic/svg/4150/4150977.svg?token=exp=1612215648~hmac=530e9291a4ebd6a4755d43c040c32382\";\n\n  if (20.1 < temp) {\n    srcPath =\n      \"https://www.flaticon.com/svg/vstatic/svg/1684/1684375.svg?token=exp=1612215367~hmac=d1650a5f43a03ce10b0e2be85259d5be\";\n  } else if (5.1 < temp && temp <= 20) {\n    srcPath =\n      \"https://www.flaticon.com/svg/vstatic/svg/2892/2892892.svg?token=exp=1612215587~hmac=69fe72026a8238949be29b7d6d4e254f\";\n  } else if (-5 < temp && temp <= 5) {\n    srcPath =\n      \"https://www.flaticon.com/svg/vstatic/svg/4151/4151003.svg?token=exp=1612215367~hmac=5ad5a774f4a95d08778e82775ffa553b\";\n  } else if (-15 < temp && temp <= -5.1) {\n    srcPath =\n      \"https://www.flaticon.com/svg/vstatic/svg/1684/1684374.svg?token=exp=1612215501~hmac=f833cecf8eb80267def922aeea1b138a\";\n  } else if (temp <= -15.1) {\n    srcPath =\n      \"https://www.flaticon.com/svg/vstatic/svg/899/899708.svg?token=exp=1612215367~hmac=bf2296ec3b7fb0c8c2f4fb0cb338d497\";\n  }\n  return srcPath;\n}\n\nfunction getIcon(temp) {\n  const myIcon = Leaflet.divIcon({\n    iconUrl:\n      \"https://cdn1.iconfinder.com/data/icons/weather-306/100/Icon_13-2-61_1-256.png\",\n    className: \"divIcon\",\n    html: `<div><img src=${getIconImage(\n      temp\n    )} alt=\"temperature icon\"/><p>${temp}</p> </div>`,\n    iconSize: [25, 25],\n    iconAnchor: [0, 0],\n    popupAnchor: [0, -5],\n  });\n\n  return myIcon;\n}\n\nexport default function MapComponent({ info }) {\n  return (\n    <>\n      {!info ? <p className=\"loading-paragraph\">Loading temperature...</p> : \"\"}\n      <MapContainer\n        center={position}\n        zoom={7}\n        scrollWheelZoom={false}\n        className=\"map\"\n        style={{ width: 1000, height: 950 }}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {info\n          ? info.map((item) => {\n              if ((item.latitude || item.longitude) !== undefined) {\n                return (\n                  <Marker\n                    key={item.id_stacji}\n                    position={[item.latitude, item.longitude]}\n                    icon={getIcon(item.temperatura)}\n                  >\n                    <Popup>\n                      {\" \"}\n                      {item.stacja}, temperatura: {item.temperatura}Â°C\n                    </Popup>\n                  </Marker>\n                );\n              }\n            })\n          : \"\"}\n      </MapContainer>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport MapComponent from \"./components/MapComponent\";\n\nconst weatherAPI = \"https://danepubliczne.imgw.pl/api/data/synop/\";\n\nfunction getGeolocationApi(city) {\n  return `http://api.positionstack.com/v1/forward?access_key=4f2583fd551ab5f9d92ece8c1844737b&query=${city.stacja}`;\n}\n\nfunction App() {\n  const [data, setData] = useState(\"\");\n\n  async function getAllApiInfo() {\n    const results = [];\n\n    let responseWeather = await fetch(weatherAPI);\n    let dataWeather = await responseWeather.json();\n\n    async function getAllGeolocation(dataWeather) {\n      try {\n        await Promise.all(\n          dataWeather.map((elem) =>\n            fetch(getGeolocationApi(elem))\n              .then((response) => response.json())\n              .then((resp) =>\n                results.push({\n                  ...elem,\n                  latitude: resp.data[0].latitude,\n                  longitude: resp.data[0].longitude,\n                })\n              )\n          )\n        );\n        return results;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    const responses = await getAllGeolocation(dataWeather);\n    setData(responses);\n  }\n\n  useEffect(function () {\n    getAllApiInfo();\n  }, []);\n\n  return <MapComponent info={data} />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"reset-css\";\n\nimport \"./scss/main.scss\"\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'leaflet/dist/leaflet.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}